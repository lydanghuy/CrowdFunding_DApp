'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _campaign = require('../../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../../routes');

var _Layout = require('../../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\DATA\\STUDY\\VGU\\4th Year\\Thesis\\code\\pages\\campaigns\\requests\\new.js?entry';


var CreateNewRequest = function (_Component) {
    (0, _inherits3.default)(CreateNewRequest, _Component);

    function CreateNewRequest() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, CreateNewRequest);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = CreateNewRequest.__proto__ || (0, _getPrototypeOf2.default)(CreateNewRequest)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            value: '',
            description: '',
            recipient: '',
            loading: false,
            errorMessage: ''
        }, _this.onSubmit = function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
                var campaign, _this$state, description, value, recipient, accounts;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                event.preventDefault();

                                campaign = (0, _campaign2.default)(_this.props.address);
                                _this$state = _this.state, description = _this$state.description, value = _this$state.value, recipient = _this$state.recipient;

                                _this.setState({ loading: true, errorMessage: '' });

                                _context.prev = 4;
                                _context.next = 7;
                                return _web2.default.eth.getAccounts();

                            case 7:
                                accounts = _context.sent;
                                _context.next = 10;
                                return campaign.methods.createRequest(description, _web2.default.utils.toWei(value, 'ether'), recipient).send({ from: accounts[0] });

                            case 10:
                                _routes.Router.pushRoute('/campaigns/' + _this.props.address + '/requests');
                                _context.next = 16;
                                break;

                            case 13:
                                _context.prev = 13;
                                _context.t0 = _context['catch'](4);

                                _this.setState({ errorMessage: _context.t0.message });

                            case 16:

                                _this.setState({ loading: false });

                            case 17:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2, [[4, 13]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(CreateNewRequest, [{
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 44
                }
            }, _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            }, 'Back')), _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 48
                }
            }, 'Create a Request'), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 49
                }
            }, _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 50
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            }, 'Description'), _react2.default.createElement(_semanticUiReact.Input, {
                value: this.state.description,
                onChange: function onChange(event) {
                    return _this3.setState({ description: event.target.value });
                }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 52
                }
            })), _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 58
                }
            }, 'Value in Ether'), _react2.default.createElement(_semanticUiReact.Input, {
                value: this.state.value,
                onChange: function onChange(event) {
                    return _this3.setState({ value: event.target.value });
                }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 59
                }
            })), _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 64
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 65
                }
            }, 'Recipient'), _react2.default.createElement(_semanticUiReact.Input, {
                value: this.state.recipient,
                onChange: function onChange(event) {
                    return _this3.setState({ recipient: event.target.value });
                }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 66
                }
            })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 71
                }
            }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 72
                }
            }, 'Create!')));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(props) {
                var address;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                address = props.query.address;
                                return _context2.abrupt('return', { address: address });

                            case 2:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function getInitialProps(_x2) {
                return _ref3.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CreateNewRequest;
}(_react.Component);

exports.default = CreateNewRequest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ3JlYXRlTmV3UmVxdWVzdCIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsInN0YXRlIiwidmFsdWUiLCJkZXNjcmlwdGlvbiIsInJlY2lwaWVudCIsImxvYWRpbmciLCJlcnJvck1lc3NhZ2UiLCJvblN1Ym1pdCIsIl9yZWYyIiwibWFyayIsIl9jYWxsZWUiLCJldmVudCIsImNhbXBhaWduIiwiX3RoaXMkc3RhdGUiLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInByb3BzIiwiYWRkcmVzcyIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNyZWF0ZVJlcXVlc3QiLCJ1dGlscyIsInRvV2VpIiwic2VuZCIsImZyb20iLCJwdXNoUm91dGUiLCJ0MCIsIm1lc3NhZ2UiLCJzdG9wIiwiX3giLCJrZXkiLCJyZW5kZXIiLCJfdGhpczMiLCJjcmVhdGVFbGVtZW50IiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyb3V0ZSIsImVycm9yIiwiRmllbGQiLCJvbkNoYW5nZSIsInRhcmdldCIsImhlYWRlciIsImNvbnRlbnQiLCJwcmltYXJ5IiwiX3JlZjMiLCJfY2FsbGVlMiIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsInF1ZXJ5IiwiYWJydXB0IiwiZ2V0SW5pdGlhbFByb3BzIiwiX3gyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7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QWYyQyxDQUFoQyxDQUFaOztBQWlCQSxxQkFBU0ssZUFBVCxDQUF5QkMsR0FBekIsRUFBOEI7QUFDMUIsdUJBQU9QLE1BQU10RCxLQUFOLENBQVksSUFBWixFQUFrQlAsU0FBbEIsQ0FBUDtBQUNIOztBQUVELG1CQUFPbUUsZUFBUDtBQUNILFNBdkJNO0FBRk4sS0FBRCxDQXJKSjs7QUFpTEEsV0FBTzNFLGdCQUFQO0FBQ0gsQ0E3UHNCLGtCQUF2Qjs7a0JBK1BlQSxnQiIsImZpbGUiOiJ1bmtub3duIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcic7XG5pbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3InO1xuaW1wb3J0IF9PYmplY3QkZ2V0UHJvdG90eXBlT2YgZnJvbSAnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG52YXIgX2pzeEZpbGVOYW1lID0gJ0U6XFxcXERBVEFcXFxcU1RVRFlcXFxcVkdVXFxcXDR0aCBZZWFyXFxcXFRoZXNpc1xcXFxjb2RlXFxcXHBhZ2VzXFxcXGNhbXBhaWduc1xcXFxyZXF1ZXN0c1xcXFxuZXcuanM/ZW50cnknO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm0sIEJ1dHRvbiwgTWVzc2FnZSwgSW5wdXQgfSBmcm9tICdzZW1hbnRpYy11aS1yZWFjdCc7XG5pbXBvcnQgQ2FtcGFpZ24gZnJvbSAnLi4vLi4vLi4vZXRoZXJldW0vY2FtcGFpZ24nO1xuaW1wb3J0IHdlYjMgZnJvbSAnLi4vLi4vLi4vZXRoZXJldW0vd2ViMyc7XG5pbXBvcnQgeyBMaW5rLCBSb3V0ZXIgfSBmcm9tICcuLi8uLi8uLi9yb3V0ZXMnO1xuaW1wb3J0IExheW91dCBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL0xheW91dCc7XG5cbnZhciBDcmVhdGVOZXdSZXF1ZXN0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQ3JlYXRlTmV3UmVxdWVzdCwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBDcmVhdGVOZXdSZXF1ZXN0KCkge1xuICAgICAgICB2YXIgX3JlZixcbiAgICAgICAgICAgIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3JlYXRlTmV3UmVxdWVzdCk7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gQ3JlYXRlTmV3UmVxdWVzdC5fX3Byb3RvX18gfHwgX09iamVjdCRnZXRQcm90b3R5cGVPZihDcmVhdGVOZXdSZXF1ZXN0KSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICAgICAgICByZWNpcGllbnQ6ICcnLFxuICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICcnXG4gICAgICAgIH0sIF90aGlzLm9uU3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBjYW1wYWlnbiwgX3RoaXMkc3RhdGUsIGRlc2NyaXB0aW9uLCB2YWx1ZSwgcmVjaXBpZW50LCBhY2NvdW50cztcblxuICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FtcGFpZ24gPSBDYW1wYWlnbihfdGhpcy5wcm9wcy5hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMkc3RhdGUgPSBfdGhpcy5zdGF0ZSwgZGVzY3JpcHRpb24gPSBfdGhpcyRzdGF0ZS5kZXNjcmlwdGlvbiwgdmFsdWUgPSBfdGhpcyRzdGF0ZS52YWx1ZSwgcmVjaXBpZW50ID0gX3RoaXMkc3RhdGUucmVjaXBpZW50O1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiB0cnVlLCBlcnJvck1lc3NhZ2U6ICcnIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdlYjMuZXRoLmdldEFjY291bnRzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRzID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FtcGFpZ24ubWV0aG9kcy5jcmVhdGVSZXF1ZXN0KGRlc2NyaXB0aW9uLCB3ZWIzLnV0aWxzLnRvV2VpKHZhbHVlLCAnZXRoZXInKSwgcmVjaXBpZW50KS5zZW5kKHsgZnJvbTogYWNjb3VudHNbMF0gfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSb3V0ZXIucHVzaFJvdXRlKCcvY2FtcGFpZ25zLycgKyBfdGhpcy5wcm9wcy5hZGRyZXNzICsgJy9yZXF1ZXN0cycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDEzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WydjYXRjaCddKDQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgZXJyb3JNZXNzYWdlOiBfY29udGV4dC50MC5tZXNzYWdlIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNjpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgX2NhbGxlZSwgX3RoaXMyLCBbWzQsIDEzXV0pO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KCksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDcmVhdGVOZXdSZXF1ZXN0LCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIExheW91dCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNDRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgTGluayxcbiAgICAgICAgICAgICAgICAgICAgeyByb3V0ZTogJy9jYW1wYWlnbnMvJyArIHRoaXMucHJvcHMuYWRkcmVzcyArICcvcmVxdWVzdHMnLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNDVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA0NlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnQmFjaydcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2gzJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDQ4XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdDcmVhdGUgYSBSZXF1ZXN0J1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgRm9ybSxcbiAgICAgICAgICAgICAgICAgICAgeyBvblN1Ym1pdDogdGhpcy5vblN1Ym1pdCwgZXJyb3I6ICEhdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UsIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA0OVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgRm9ybS5GaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA1MFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDUxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdEZXNjcmlwdGlvbidcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuc2V0U3RhdGUoeyBkZXNjcmlwdGlvbjogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDUyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIEZvcm0uRmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNTdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA1OFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVmFsdWUgaW4gRXRoZXInXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLnNldFN0YXRlKHsgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA1OVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBGb3JtLkZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDY0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNjVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1JlY2lwaWVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUucmVjaXBpZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLnNldFN0YXRlKHsgcmVjaXBpZW50OiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNjZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1lc3NhZ2UsIHsgZXJyb3I6IHRydWUsIGhlYWRlcjogJ09vcHMhJywgY29udGVudDogdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UsIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA3MVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIEJ1dHRvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcHJpbWFyeTogdHJ1ZSwgbG9hZGluZzogdGhpcy5zdGF0ZS5sb2FkaW5nLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA3MlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnQ3JlYXRlISdcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHByb3BzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFkZHJlc3M7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgPSBwcm9wcy5xdWVyeS5hZGRyZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgncmV0dXJuJywgeyBhZGRyZXNzOiBhZGRyZXNzIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRJbml0aWFsUHJvcHMoX3gyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBnZXRJbml0aWFsUHJvcHM7XG4gICAgICAgIH0oKVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDcmVhdGVOZXdSZXF1ZXN0O1xufShDb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVOZXdSZXF1ZXN0OyJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,