'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _routes = require('../../../routes');

var _Layout = require('../../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require('../../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _RequestItem = require('../../../components/RequestItem');

var _RequestItem2 = _interopRequireDefault(_RequestItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\DATA\\STUDY\\VGU\\4th Year\\Thesis\\code\\pages\\campaigns\\requests\\index.js?entry';


var RequestIndex = function (_Component) {
    (0, _inherits3.default)(RequestIndex, _Component);

    function RequestIndex() {
        (0, _classCallCheck3.default)(this, RequestIndex);

        return (0, _possibleConstructorReturn3.default)(this, (RequestIndex.__proto__ || (0, _getPrototypeOf2.default)(RequestIndex)).apply(this, arguments));
    }

    (0, _createClass3.default)(RequestIndex, [{
        key: 'renderRows',
        value: function renderRows() {
            var _this2 = this;

            return this.props.requests.map(function (request, index) {
                return _react2.default.createElement(_RequestItem2.default, {
                    key: index,
                    id: index,
                    request: request,
                    address: _this2.props.address,
                    numberOfContributors: _this2.props.numberOfContributors, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 24
                    }
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var Header = _semanticUiReact.Table.Header,
                Row = _semanticUiReact.Table.Row,
                HeaderCell = _semanticUiReact.Table.HeaderCell,
                Body = _semanticUiReact.Table.Body;

            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 38
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            }, 'Requests'), _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests/new', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, floated: 'right', style: { marginBottom: 10 }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            }, ' Add Request '))), _react2.default.createElement(_semanticUiReact.Table, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 43
                }
            }, _react2.default.createElement(Header, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 44
                }
            }, _react2.default.createElement(Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            }, 'ID'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            }, 'Description'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 48
                }
            }, 'Amount'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 49
                }
            }, 'Recipient'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 50
                }
            }, 'Approval Count'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            }, 'Approve'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 52
                }
            }, 'Finalize'))), _react2.default.createElement(Body, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 55
                }
            }, this.renderRows())), _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                }
            }, 'Found ', this.props.requestCount, ' requests.'));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var address, campaign, requestCount, numberOfContributors, requests;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                address = props.query.address;
                                campaign = (0, _campaign2.default)(address);
                                _context.next = 4;
                                return campaign.methods.getRequestsCount().call();

                            case 4:
                                requestCount = _context.sent;
                                _context.next = 7;
                                return campaign.methods.numberOfContributors().call();

                            case 7:
                                numberOfContributors = _context.sent;
                                _context.next = 10;
                                return _promise2.default.all(Array(parseInt(requestCount)).fill().map(function (element, index) {
                                    return campaign.methods.requests(index).call();
                                }));

                            case 10:
                                requests = _context.sent;
                                return _context.abrupt('return', { address: address, requests: requests, requestCount: requestCount, numberOfContributors: numberOfContributors });

                            case 12:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps(_x) {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return RequestIndex;
}(_react.Component);

exports.default = RequestIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJSb3dzIiwiX3RoaXMyIiwicHJvcHMiLCJyZXF1ZXN0cyIsIm1hcCIsInJlcXVlc3QiLCJpbmRleCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImFkZHJlc3MiLCJudW1iZXJPZkNvbnRyaWJ1dG9ycyIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiSGVhZGVyIiwiUm93IiwiSGVhZGVyQ2VsbCIsIkJvZHkiLCJyb3V0ZSIsInByaW1hcnkiLCJmbG9hdGVkIiwic3R5bGUiLCJtYXJnaW5Cb3R0b20iLCJyZXF1ZXN0Q291bnQiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJjYW1wYWlnbiIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJxdWVyeSIsIm1ldGhvZHMiLCJnZXRSZXF1ZXN0c0NvdW50IiwiY2FsbCIsInNlbnQiLCJhbGwiLCJBcnJheSIsInBhcnNlSW50IiwiZmlsbCIsImVsZW1lbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBTkEsSUFBSUEsZUFBZSwwRkFBbkI7OztBQVFBLElBQUlDLGVBQWUsVUFBVUMsVUFBVixFQUFzQjtBQUNyQyw0QkFBVUQsWUFBVixFQUF3QkMsVUFBeEI7O0FBRUEsYUFBU0QsWUFBVCxHQUF3QjtBQUNwQixzQ0FBZ0IsSUFBaEIsRUFBc0JBLFlBQXRCOztBQUVBLGVBQU8seUNBQTJCLElB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