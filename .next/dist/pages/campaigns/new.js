'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\DATA\\STUDY\\VGU\\4th Year\\Thesis\\code\\pages\\campaigns\\new.js?entry';


var CampaignNew = function (_Component) {
    (0, _inherits3.default)(CampaignNew, _Component);

    function CampaignNew() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, CampaignNew);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = CampaignNew.__proto__ || (0, _getPrototypeOf2.default)(CampaignNew)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            minimumContribution: '',
            campaignName: '',
            campaignDescription: '',
            errorMessage: '',
            loading: false
        }, _this.onSubmit = function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
                var accounts;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                event.preventDefault();

                                _this.setState({ loading: true, errorMessage: '' });

                                _context.prev = 2;
                                _context.next = 5;
                                return _web2.default.eth.getAccounts();

                            case 5:
                                accounts = _context.sent;
                                _context.next = 8;
                                return _factory2.default.methods.createCampaign(_this.state.minimumContribution, _this.state.campaignName, _this.state.campaignDescription).send({
                                    from: accounts[0]
                                });

                            case 8:

                                _routes.Router.pushRoute('/');
                                _context.next = 14;
                                break;

                            case 11:
                                _context.prev = 11;
                                _context.t0 = _context['catch'](2);

                                _this.setState({ errorMessage: _context.t0.message });

                            case 14:

                                _this.setState({ loading: false });

                            case 15:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2, [[2, 11]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(CampaignNew, [{
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            }, 'Create a Campaign'), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 43
                }
            }, _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 44
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, 'Campaign Name'), _react2.default.createElement('input', { required: 'true', value: this.state.campaignName,
                onChange: function onChange(event) {
                    return _this3.setState({ campaignName: event.target.value });
                }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            })), _react2.default.createElement(_semanticUiReact.Form.TextArea, { required: true, autoHeight: true, label: 'Campaign Description', value: this.state.campaignDescription,
                onChange: function onChange(event) {
                    return _this3.setState({ campaignDescription: event.target.value });
                }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 50
                }
            }), _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 53
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 54
                }
            }, 'Minimum Contribution'), _react2.default.createElement(_semanticUiReact.Input, { label: 'wei', labelPosition: 'right', value: this.state.minimumContribution,
                onChange: function onChange(event) {
                    return _this3.setState({ minimumContribution: event.target.value });
                }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 55
                }
            })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 58
                }
            }), _react2.default.createElement(_semanticUiReact.Button, { loading: this.state.loading, primary: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 59
                }
            }, 'Create!')));
        }
    }]);

    return CampaignNew;
}(_react.Component);

exports.default = CampaignNew;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25OZXciLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsIm1pbmltdW1Db250cmlidXRpb24iLCJjYW1wYWlnbk5hbWUiLCJjYW1wYWlnbkRlc2NyaXB0aW9uIiwiZXJyb3JNZXNzYWdlIiwibG9hZGluZyIsIm9uU3VibWl0IiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsImV2ZW50IiwiYWNjb3VudHMiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicHJldmVudERlZmF1bHQiLCJzZXRTdGF0ZSIsImV0aCIsImdldEFjY291bnRzIiwic2VudCIsIm1ldGhvZHMiLCJjcmVhdGVDYW1wYWlnbiIsInNlbmQiLCJmcm9tIiwicHVzaFJvdXRlIiwidDAiLCJtZXNzYWdlIiwic3RvcCIsIl94Iiwia2V5IiwidmFsdWUiLCJyZW5kZXIiLCJfdGhpczMiLCJjcmVhdGVFbGVtZW50IiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJlcnJvciIsIkZpZWxkIiwicmVxdWlyZWQiLCJvbkNoYW5nZSIsInRhcmdldCIsIlRleHRBcmVhIiwiYXV0b0hlaWdodCIsImxhYmVsIiwibGFiZWxQb3NpdGlvbiIsImhlYWRlciIsImNvbnRlbnQiLCJwcmltYXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFOQSxJQUFJQSxlQUFlLDhFQUFuQjs7O0FBUUEsSUFBSUMs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