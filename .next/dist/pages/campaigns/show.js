'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require('../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _DonateForm = require('../../components/DonateForm');

var _DonateForm2 = _interopRequireDefault(_DonateForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\DATA\\STUDY\\VGU\\4th Year\\Thesis\\code\\pages\\campaigns\\show.js?entry';


var CampaignShow = function (_Component) {
    (0, _inherits3.default)(CampaignShow, _Component);

    function CampaignShow() {
        (0, _classCallCheck3.default)(this, CampaignShow);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignShow.__proto__ || (0, _getPrototypeOf2.default)(CampaignShow)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignShow, [{
        key: 'renderCampaignDetails',
        value: function renderCampaignDetails() {
            var _props = this.props,
                campaignName = _props.campaignName,
                campaignDescription = _props.campaignDescription,
                balance = _props.balance,
                creator = _props.creator,
                minimumContribution = _props.minimumContribution,
                requestsCount = _props.requestsCount,
                numberOfContributors = _props.numberOfContributors;

            var items = [{
                header: creator,
                meta: 'Address of Campaign\'s Creator',
                description: 'The creator created this campaign and can create requests to withdraw money',
                style: { overflowWrap: 'break-word' }
            }, {
                header: minimumContribution + ' (wei) = ' + minimumContribution / 1000000000000000000 + ' (ether)',
                meta: 'Minimum Contribution (wei)',
                description: 'You must donate at least ' + minimumContribution + ' wei to become a contributor'
            }, {
                header: requestsCount,
                meta: 'Number of Requests',
                description: 'A request tries to withdraw money from the contract. Requests must be approved by contributors'
            }, {
                header: numberOfContributors,
                meta: 'Number of Contributors',
                description: 'Number of people who have already donated to this campaign'
            }, {
                header: _web2.default.utils.fromWei(balance, 'ether'),
                meta: 'Campaign Balance (ether)',
                description: 'The balance is how much money this campaign has left to spend.'
            }];

            return _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 72
                }
            }, _react2.default.createElement(_semanticUiReact.Card, { fluid: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 73
                }
            }, _react2.default.createElement(_semanticUiReact.Card.Content, { header: campaignName, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 74
                }
            }), _react2.default.createElement(_semanticUiReact.Card.Content, { description: campaignDescription, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 75
                }
            })), _react2.default.createElement('br', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 77
                }
            }), _react2.default.createElement('br', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 77
                }
            }), _react2.default.createElement('br', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 77
                }
            }), _react2.default.createElement(_semanticUiReact.Card.Group, { itemsPerRow: 3, items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 78
                }
            }));
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 87
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 88
                }
            }, 'Campaign Show'), _react2.default.createElement(_semanticUiReact.Grid, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 90
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 91
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 12, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 92
                }
            }, this.renderCampaignDetails()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 4, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 93
                }
            }, _react2.default.createElement(_DonateForm2.default, { address: this.props.address, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 94
                }
            }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 98
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 99
                }
            }, _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 100
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 101
                }
            }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 101
                }
            }, 'View Requests')))))));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var campaign, details;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                campaign = (0, _campaign2.default)(props.query.address);
                                _context.next = 3;
                                return campaign.methods.getCampaignDetails().call();

                            case 3:
                                details = _context.sent;
                                return _context.abrupt('return', {
                                    address: props.query.address,
                                    minimumContribution: details[0],
                                    campaignName: details[1],
                                    campaignDescription: details[2],
                                    balance: details[3],
                                    requestsCount: details[4],
                                    numberOfContributors: details[5],
                                    creator: details[6]
                                });

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps(_x) {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignShow;
}(_react.Component);

exports.default = CampaignShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25TaG93IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYW1wYWlnbkRldGFpbHMiLCJfcHJvcHMiLCJwcm9wcyIsImNhbXBhaWduTmFtZSIsImNhbXBhaWduRGVzY3JpcHRpb24iLCJiYWxhbmNlIiwiY3JlYXRvciIsIm1pbmltdW1Db250cmlidXRpb24iLCJyZXF1ZXN0c0NvdW50IiwibnVtYmVyT2ZDb250cmlidXRvcnMiLCJpdGVtcyIsImhlYWRlciIsIm1ldGEiLCJkZXNjcmlwdGlvbiIsInN0eWxlIiwib3ZlcmZsb3dXcmFwIiwidXRpbHMiLCJmcm9tV2VpIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZmx1aWQiLCJDb250ZW50IiwiR3JvdXAiLCJpdGVtc1BlclJvdyIsInJlbmRlciIsIlJvdyIsIkNvbHVtbiIsIndpZHRoIiwiYWRkcmVzcyIsInJvdXRlIiwicHJpbWFyeSIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsImNhbXBhaWduIiwiZGV0YWlscyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJxdWVyeSIsIm1ldGhvZHMiLCJnZXRDYW1wYWlnbkRldGFpbHMiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFQQSxJQUFJQSxlQUFlLCtFQUFuQjs7O0FBU0EsSUFBSUMsZUFBZSxVQUFVQyxVQUFWLEVBQXNCO0FBQ3JDLDRCQUFV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