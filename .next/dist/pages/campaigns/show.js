'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require('../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\DATA\\STUDY\\VGU\\4th Year\\Thesis\\code\\pages\\campaigns\\show.js?entry';
// import ContributeForm from '../../components/ContributeForm';


var CampaignShow = function (_Component) {
    (0, _inherits3.default)(CampaignShow, _Component);

    function CampaignShow() {
        (0, _classCallCheck3.default)(this, CampaignShow);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignShow.__proto__ || (0, _getPrototypeOf2.default)(CampaignShow)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignShow, [{
        key: 'renderCampaignDetails',
        value: function renderCampaignDetails() {
            var _props = this.props,
                campaignName = _props.campaignName,
                campaignDescription = _props.campaignDescription,
                balance = _props.balance,
                creator = _props.creator,
                minimumContribution = _props.minimumContribution,
                requestsCount = _props.requestsCount,
                numberOfContributors = _props.numberOfContributors;

            var items = [{
                header: creator,
                meta: 'Address of Campaign\'s Creator',
                description: 'The creator created this campaign and can create requests to withdraw money',
                style: { overflowWrap: 'break-word' }
            }, {
                header: minimumContribution,
                meta: 'Minimum Contribution (wei)',
                description: 'You must contribute at least ' + minimumContribution + ' wei to become a contributor'
            }, {
                header: requestsCount,
                meta: 'Number of Requests',
                description: 'A request tries to withdraw money from the contract. Requests must be approved by contributors'
            }, {
                header: numberOfContributors,
                meta: 'Number of Contributors',
                description: 'Number of people who have already donated to this campaign'
            }, {
                header: _web2.default.utils.fromWei(balance, 'ether'),
                meta: 'Campaign Balance (ether)',
                description: 'The balance is how much money this campaign has left to spend.'
            }];

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 71
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 78
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 79
                }
            }, 'Campaign Show'), this.renderCampaignDetails());
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var campaign, details;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                campaign = (0, _campaign2.default)(props.query.address);
                                _context.next = 3;
                                return campaign.methods.getCampaignDetails().call();

                            case 3:
                                details = _context.sent;
                                return _context.abrupt('return', {
                                    address: props.query.address,
                                    minimumContribution: details[0],
                                    campaignName: details[1],
                                    campaignDescription: details[2],
                                    balance: details[3],
                                    requestsCount: details[4],
                                    numberOfContributors: details[5],
                                    creator: details[6]
                                });

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps(_x) {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignShow;
}(_react.Component);

exports.default = CampaignShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25TaG93IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYW1wYWlnbkRldGFpbHMiLCJfcHJvcHMiLCJwcm9wcyIsImNhbXBhaWduTmFtZSIsImNhbXBhaWduRGVzY3JpcHRpb24iLCJiYWxhbmNlIiwiY3JlYXRvciIsIm1pbmltdW1Db250cmlidXRpb24iLCJyZXF1ZXN0c0NvdW50IiwibnVtYmVyT2ZDb250cmlidXRvcnMiLCJpdGVtcyIsImhlYWRlciIsIm1ldGEiLCJkZXNjcmlwdGlvbiIsInN0eWxlIiwib3ZlcmZsb3dXcmFwIiwidXRpbHMiLCJmcm9tV2VpIiwiY3JlYXRlRWxlbWVudCIsIkdyb3VwIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyZW5kZXIiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJjYW1wYWlnbiIsImRldGFpbHMiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicXVlcnkiLCJhZGRyZXNzIiwibWV0aG9kcyIsImdldENhbXBhaWduRGV0YWlscyIsImNhbGwiLCJzZW50IiwiYWJydXB0Iiwic3RvcCIsImdldEluaXRpYWxQcm9wcyIsIl94Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFQQSxJQUFJQSxlQUFlLCtFQUFuQjtBQU1BOzs7QUFHQSxJQUFJQyxlQUFlLFVBQVVDLFVBQVYsRUFBc0I7QUFDckMsNEJBQVVELFlBQVYsRUFBd0JDLFVBQXhCOztBQUVBLGFBQVNELFlBQVQsR0FBd0I7QUFDcEIsc0NBQWdCLElBQWhCLEVBQXNCQSxZQUF0Qjs7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