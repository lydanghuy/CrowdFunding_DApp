'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\DATA\\STUDY\\VGU\\4th Year\\Thesis\\code\\pages\\index.js?entry';


var CampaignIndex = function (_Component) {
    (0, _inherits3.default)(CampaignIndex, _Component);

    function CampaignIndex() {
        (0, _classCallCheck3.default)(this, CampaignIndex);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignIndex, [{
        key: 'renderCampaigns',
        value: function renderCampaigns() {
            var _this2 = this;

            var items = this.props.campaignAddresses.map(function (address, index) {
                return {
                    header: _this2.props.campaignNameContainer[index],
                    meta: address,
                    description: _react2.default.createElement(_routes.Link, { route: '/campaigns/' + address, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 28
                        }
                    }, _react2.default.createElement('a', {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 29
                        }
                    }, 'View Campaign')),
                    fluid: true
                };
            });

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 36
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {

            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 42
                }
            }, _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 43
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, 'Open Campaigns'), _react2.default.createElement(_routes.Link, { route: '/campaigns/new', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            }, _react2.default.createElement(_semanticUiReact.Button, { floated: 'right', content: 'Create Campaign', icon: 'add circle', primary: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            }))), this.renderCampaigns()));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var campaignAddresses, campaignNameContainer, index, campaign, campaignName;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return _factory2.default.methods.getDeployedCampaigns().call();

                            case 2:
                                campaignAddresses = _context.sent;
                                campaignNameContainer = [];
                                _context.t0 = _regenerator2.default.keys(campaignAddresses);

                            case 5:
                                if ((_context.t1 = _context.t0()).done) {
                                    _context.next = 14;
                                    break;
                                }

                                index = _context.t1.value;
                                campaign = (0, _campaign2.default)(campaignAddresses[index]);
                                _context.next = 10;
                                return campaign.methods.CampaignName().call();

                            case 10:
                                campaignName = _context.sent;

                                campaignNameContainer.push(campaignName);
                                _context.next = 5;
                                break;

                            case 14:
                                return _context.abrupt('return', {
                                    campaignAddresses: campaignAddresses, campaignNameContainer: campaignNameContainer
                                });

                            case 15:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps() {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyQ2FtcGFpZ25zIiwiX3RoaXMyIiwiaXRlbXMiLCJwcm9wcyIsImNhbXBhaWduQWRkcmVzc2VzIiwibWFwIiwiYWRkcmVzcyIsImluZGV4IiwiaGVhZGVyIiwiY2FtcGFpZ25OYW1lQ29udGFpbmVyIiwibWV0YSIsImRlc2NyaXB0aW9uIiwiY3JlYXRlRWxlbWVudCIsInJvdXRlIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJmbHVpZCIsIkdyb3VwIiwicmVuZGVyIiwiZmxvYXRlZCIsImNvbnRlbnQiLCJpY29uIiwicHJpbWFyeSIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsImNhbXBhaWduIiwiY2FtcGFpZ25OYW1lIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJnZXREZXBsb3llZENhbXBhaWducyIsImNhbGwiLCJzZW50IiwidDAiLCJrZXlzIiwidDEiLCJkb25lIiwiQ2FtcGFpZ25OYW1lIiwicHVzaCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztBQU5BLElBQUlBLGVBQWUscUVBQW5COzs7QUFRQSxJQUFJQyxnQkFBZ0IsVUFBVUMsVUFBVixFQUFzQjtBQUN0Qyw0QkFBVUQsYUFBVixFQUF5QkMsVUFBekI7O0FBRUEsYUFBU0QsYUFBVCxHQUF5QjtBQUNyQixzQ0FBZ0IsSUFBaEIsRUFBc0JBLGFBQXRCOztBQUVBLGVBQU8seUNBQTJC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