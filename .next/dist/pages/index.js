'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\DATA\\STUDY\\VGU\\4th Year\\Thesis\\code\\pages\\index.js?entry';


var CampaignIndex = function (_Component) {
    (0, _inherits3.default)(CampaignIndex, _Component);

    function CampaignIndex() {
        (0, _classCallCheck3.default)(this, CampaignIndex);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignIndex, [{
        key: 'renderCampaigns',
        value: function renderCampaigns() {
            var items = this.props.campaignAddresses.map(function (address) {
                var campaign = (0, _campaign2.default)(address);

                var campaignName = campaign.methods.CampaignName().call().then(function (name) {
                    // console.log(name);
                });
                return {
                    header: address,
                    // meta: address,
                    description: _react2.default.createElement(_routes.Link, { route: '/campaigns/' + address, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 28
                        }
                    }, _react2.default.createElement('a', {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 29
                        }
                    }, 'View Campaign')),
                    fluid: true
                };
            });

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 36
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {

            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 42
                }
            }, _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 43
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, 'Open Campaigns'), _react2.default.createElement(_routes.Link, { route: '/campaigns/new', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            }, _react2.default.createElement(_semanticUiReact.Button, { floated: 'right', content: 'Create Campaign', icon: 'add circle', primary: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            }))), this.renderCampaigns()));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var campaignAddresses;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return _factory2.default.methods.getDeployedCampaigns().call();

                            case 2:
                                campaignAddresses = _context.sent;
                                return _context.abrupt('return', {
                                    campaignAddresses: campaignAddresses
                                });

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps() {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyQ2FtcGFpZ25zIiwiaXRlbXMiLCJwcm9wcyIsImNhbXBhaWduQWRkcmVzc2VzIiwibWFwIiwiYWRkcmVzcyIsImNhbXBhaWduIiwiY2FtcGFpZ25OYW1lIiwibWV0aG9kcyIsIkNhbXBhaWduTmFtZSIsImNhbGwiLCJ0aGVuIiwibmFtZSIsImhlYWRlciIsImRlc2NyaXB0aW9uIiwiY3JlYXRlRWxlbWVudCIsInJvdXRlIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJmbHVpZCIsIkdyb3VwIiwicmVuZGVyIiwiZmxvYXRlZCIsImNvbnRlbnQiLCJpY29uIiwicHJpbWFyeSIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJnZXREZXBsb3llZENhbXBhaWducyIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOztBQUNBOzs7Ozs7QUFOQSxJQUFJQSxlQUFlLHFFQUFuQjs7O0FBUUEsSUFBSUMsZ0JBQWdCLFVBQVVDLFVBQVYsRUFBc0I7QUFDdEMsNEJBQVVELGFBQVYsRUFBeUJDLFVBQXpCOztBQUVBLGFBQVNELGFBQVQsR0FBeUI7QUFDckIsc0NBQWdCLElBQWhCLEVBQXNCQSxhQUF0Qjs7QUFFQSxlQUFPLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDQSxjQUFjRSxTQUFkLElBQTJCLDhCQUF1QkYsYUFBdkIsQ0FBNUIsRUFBbUVHLEtB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