'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\DATA\\STUDY\\VGU\\4th Year\\Thesis\\code\\pages\\index.js?entry';


var CampaignIndex = function (_Component) {
    (0, _inherits3.default)(CampaignIndex, _Component);

    function CampaignIndex() {
        (0, _classCallCheck3.default)(this, CampaignIndex);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignIndex, [{
        key: 'renderCampaigns',
        value: function renderCampaigns() {
            var items = this.props.campaigns.map(function (address) {

                return {

                    header: address,
                    description: _react2.default.createElement(_routes.Link, { route: '/campaigns/' + address, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 20
                        }
                    }, _react2.default.createElement('a', {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 21
                        }
                    }, 'View Campaign')),
                    fluid: true
                };
            });

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 28
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {

            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                }
            }, _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 35
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 37
                }
            }, 'Open Campaigns'), _react2.default.createElement(_routes.Link, { route: '/campaigns/new', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 38
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            }, _react2.default.createElement(_semanticUiReact.Button, { floated: 'right', content: 'Create Campaign', icon: 'add circle', primary: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            }))), this.renderCampaigns()));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var campaigns;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return _factory2.default.methods.getDeployedCampaigns().call();

                            case 2:
                                campaigns = _context.sent;
                                return _context.abrupt('return', { campaigns: campaigns });

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps() {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyQ2FtcGFpZ25zIiwiaXRlbXMiLCJwcm9wcyIsImNhbXBhaWducyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJyb3V0ZSIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZmx1aWQiLCJHcm91cCIsInJlbmRlciIsImZsb2F0ZWQiLCJjb250ZW50IiwiaWNvbiIsInByaW1hcnkiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwibWV0aG9kcyIsImdldERlcGxveWVkQ2FtcGFpZ25zIiwiY2FsbCIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBTEEsSUFBSUEsZUFBZSxxRUFBbkI7OztBQU9BLElBQUlDLGdCQUFnQixVQUFVQyxVQUFWLEVBQXNCO0FBQ3RDLDRCQUFVRCxhQUFWLEVBQXlCQyxVQUF6Qjs7QUFFQSxhQUFTRCxhQUFULEdBQXlCO0FBQ3JCLHNDQUFnQixJQUFoQixFQUFzQkEsYUFBdEI7O0FBRUEsZUFBTyx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0EsY0FBY0UsU0FBZCxJQUEyQiw4QkFBdUJGLGFBQXZCLENBQTVCLEVBQW1FRyxLQUFuRSxDQUF5RSxJQUF6RSxFQUErRUMsU0FBL0UsQ0FBakMsQ0FBUDtBQUNIOztBQUVELCtCQUFhSixhQUFiLEVBQTRCLENB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