'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\DATA\\STUDY\\VGU\\4th Year\\Thesis\\code\\components\\RequestItem.js';


var RequestItem = function (_Component) {
    (0, _inherits3.default)(RequestItem, _Component);

    function RequestItem() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, RequestItem);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RequestItem.__proto__ || (0, _getPrototypeOf2.default)(RequestItem)).call.apply(_ref, [this].concat(args))), _this), _this.onApprove = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            var campaign, accounts;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            campaign = (0, _campaign2.default)(_this.props.address);
                            _context.next = 3;
                            return _web2.default.eth.getAccounts();

                        case 3:
                            accounts = _context.sent;
                            _context.next = 6;
                            return campaign.methods.approveRequest(_this.props.id).send({ from: accounts[0] });

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, _this2);
        })), _this.onFinalize = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
            var campaign, accounts;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            campaign = (0, _campaign2.default)(_this.props.address);
                            _context2.next = 3;
                            return _web2.default.eth.getAccounts();

                        case 3:
                            accounts = _context2.sent;
                            _context2.next = 6;
                            return campaign.methods.finalizeRequest(_this.props.id).send({ from: accounts[0]
                            });

                        case 6:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, _this2);
        })), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(RequestItem, [{
        key: 'render',
        value: function render() {
            var Row = _semanticUiReact.Table.Row,
                Cell = _semanticUiReact.Table.Cell;
            var _props = this.props,
                id = _props.id,
                request = _props.request,
                numberOfContributors = _props.numberOfContributors;

            var readyToFinalize = request.approvalCount > numberOfContributors / 2;

            return _react2.default.createElement(Row, { disabled: request.complete, positive: readyToFinalize && !request.complete, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 26
                }
            }, _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 27
                }
            }, id), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 28
                }
            }, request.description), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 29
                }
            }, _web2.default.utils.fromWei(request.value, 'ether')), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 30
                }
            }, request.recipient), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 31
                }
            }, request.approvalCount, '/', numberOfContributors), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                }
            }, request.complete ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'green', basic: true, onClick: this.onApprove, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 36
                }
            }, 'Approve')), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            }, request.complete ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'teal', basic: true, onClick: this.onFinalize, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            }, 'Finalize')));
        }
    }]);

    return RequestItem;
}(_react.Component);

exports.default = RequestItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdEl0ZW0iLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJvbkFwcHJvdmUiLCJtYXJrIiwiX2NhbGxlZSIsImNhbXBhaWduIiwiYWNjb3VudHMiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicHJvcHMiLCJhZGRyZXNzIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImFwcHJvdmVSZXF1ZXN0IiwiaWQiLCJzZW5kIiwiZnJvbSIsInN0b3AiLCJvbkZpbmFsaXplIiwiX2NhbGxlZTIiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJmaW5hbGl6ZVJlcXVlc3QiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsIlJvdyIsIkNlbGwiLCJfcHJvcHMiLCJyZXF1ZXN0IiwibnVtYmVyT2ZDb250cmlidXRvcnMiLCJyZWFkeVRvRmluYWxpemUiLCJhcHByb3ZhbENvdW50IiwiY3JlYXRlRWxlbWVudCIsImRpc2FibGVkIiwiY29tcGxldGUiLCJwb3NpdGl2ZSIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZGVzY3JpcHRpb24iLCJ1dGlscyIsImZyb21XZWkiLCJyZWNpcGllbnQiLCJjb2xvciIsImJhc2ljIiwib25DbGljayJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQUpBLElBQUlBLGVBQWUsMEVBQW5COzs7QUFNQSxJQUFJQyxjQUFjLFVBQVVDLFVBQVYsRUFBc0I7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LEVBMkJILGdCQUFNUCxhQUFOLENBQ0lOLElBREosRUFFSTtBQUNJVSwwQkFBVTtBQUNOQyw4QkFBVTNELFlBREo7QUFFTjRELGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUksY0FBS0UsS0FBTCxDQUFXQyxPQUFYLENBQW1CYixRQUFRTCxLQUEzQixFQUFrQyxPQUFsQyxDQVJKLENBM0JHLEVBcUNILGdCQUFNUyxhQUFOLENBQ0lOLElBREosRUFFSTtBQUNJVSwwQkFBVTtBQUNOQyw4QkFBVTNELFlBREo7QUFFTjRELGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUlWLFFBQVFjLFNBUlosQ0FyQ0csRUErQ0gsZ0JBQU1WLGFBQU4sQ0FDSU4sSUFESixFQUVJO0FBQ0lVLDBCQUFVO0FBQ05DLDhCQUFVM0QsWUFESjtBQUVONEQsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSVYsUUFBUUcsYUFSWixFQVNJLEdBVEosRUFVSUYsb0JBVkosQ0EvQ0csRUEyREgsZ0JBQU1HLGFBQU4sQ0FDSU4sSUFESixFQUVJO0FBQ0lVLDBCQUFVO0FBQ05DLDhCQUFVM0QsWUFESjtBQUVONEQsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSVYsUUFBUU0sUUFBUixHQUFtQixJQUFuQixHQUEwQixnQkFBTUYsYUFBTiwwQkFFdEIsRUFBRVcsT0FBTyxPQUFULEVBQWtCQyxPQUFPLElBQXpCLEVBQStCQyxTQUFTLEtBQUtqRCxTQUE3QyxFQUF3RHdDLFVBQVU7QUFDMURDLDhCQUFVM0QsWUFEZ0Q7QUFFMUQ0RCxnQ0FBWTtBQUY4QztBQUFsRSxhQUZzQixFQU90QixTQVBzQixDQVI5QixDQTNERyxFQTZFSCxnQkFBTU4sYUFBTixDQUNJTixJQURKLEVBRUk7QUFDSVUsMEJBQVU7QUFDTkMsOEJBQVUzRCxZQURKO0FBRU40RCxnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJVixRQUFRTSxRQUFSLEdBQW1CLElBQW5CLEdBQTBCLGdCQUFNRixhQUFOLDBCQUV0QixFQUFFVyxPQUFPLE1BQVQsRUFBaUJDLE9BQU8sSUFBeEIsRUFBOEJDLFNBQVMsS0FBSzVCLFVBQTVDLEVBQXdEbUIsVUFBVTtBQUMxREMsOEJBQVUzRCxZQURnRDtBQUUxRDRELGdDQUFZO0FBRjhDO0FBQWxFLGFBRnNCLEVBT3RCLFVBUHNCLENBUjlCLENBN0VHLENBQVA7QUFnR0g7QUE1R3NCLEtBQUQsQ0FBMUI7O0FBK0dBLFdBQU8zRCxXQUFQO0FBQ0gsQ0E3S2lCLGtCQUFsQjs7a0JBK0tlQSxXIiwiZmlsZSI6InVua25vd24ifQ==