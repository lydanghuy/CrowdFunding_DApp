'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\DATA\\STUDY\\VGU\\4th Year\\Thesis\\code\\components\\DonateForm.js';


var DonateForm = function (_Component) {
    (0, _inherits3.default)(DonateForm, _Component);

    function DonateForm() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, DonateForm);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DonateForm.__proto__ || (0, _getPrototypeOf2.default)(DonateForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            value: '',
            errorMessage: '',
            loading: false
        }, _this.onSubmit = function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
                var campaign, accounts;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                event.preventDefault();

                                campaign = (0, _campaign2.default)(_this.props.address);

                                _this.setState({ loading: true, errorMessage: '' });

                                _context.prev = 3;
                                _context.next = 6;
                                return _web2.default.eth.getAccounts();

                            case 6:
                                accounts = _context.sent;
                                _context.next = 9;
                                return campaign.methods.donate().send({ from: accounts[0], value: _web2.default.utils.toWei(_this.state.value, 'ether') });

                            case 9:
                                _routes.Router.replaceRoute('/campaigns/' + _this.props.address);
                                _context.next = 15;
                                break;

                            case 12:
                                _context.prev = 12;
                                _context.t0 = _context['catch'](3);

                                _this.setState({ errorMessage: _context.t0.message });

                            case 15:

                                _this.setState({ loading: false, value: '' });

                            case 16:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2, [[3, 12]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(DonateForm, [{
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                }
            }, _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 35
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 36
                }
            }, 'Amount to Donate'), _react2.default.createElement(_semanticUiReact.Input, {
                value: this.state.value,
                onChange: function onChange(event) {
                    return _this3.setState({ value: event.target.value });
                },
                label: 'ether',
                labelPosition: 'right', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 37
                }
            })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 44
                }
            }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, 'Donate!'));
        }
    }]);

    return DonateForm;
}(_react.Component);

exports.default = DonateForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiRG9uYXRlRm9ybSIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsInN0YXRlIiwidmFsdWUiLCJlcnJvck1lc3NhZ2UiLCJsb2FkaW5nIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJjYW1wYWlnbiIsImFjY291bnRzIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInByZXZlbnREZWZhdWx0IiwicHJvcHMiLCJhZGRyZXNzIiwic2V0U3RhdGUiLCJldGgiLCJnZXRBY2NvdW50cyIsInNlbnQiLCJtZXRob2RzIiwiZG9uYXRlIiwic2VuZCIsImZyb20iLCJ1dGlscyIsInRvV2VpIiwicmVwbGFjZVJvdXRlIiwidDAiLCJtZXNzYWdlIiwic3RvcCIsIl94Iiwia2V5IiwicmVuZGVyIiwiX3RoaXMzIiwiY3JlYXRlRWxlbWVudCIsImVycm9yIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJGaWVsZCIsIm9uQ2hhbmdlIiwidGFyZ2V0IiwibGFiZWwiLCJsYWJlbFBvc2l0aW9uIiwiaGVhZGVyIiwiY29udGVudCIsInByaW1hcnkiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFMQSxJQUFJQSxlQUFlLHlFQUFuQjs7O0FBT0EsSUFBSUMsYUFBYSxVQUFVQyxVQUFWLEVBQXNCO0FBQ25DLDRCQUFVRCxVQUFWLEVBQXNCQyxVQUF0Qjs7QUFFQSxhQUFT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